package hundirlaflota;

import java.awt.Component;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * Clase Main con la funcionalidad necesaria para pintar la interfaz de usuario
 * e implementar la lógica del juego
 *
 * @author Elena
 */
public class HundirLaFlota extends javax.swing.JFrame {

    /**
     * Ranking del juego
     */
    public static Ranking ranking;
    /**
     * Tablero de juego actual
     */
    public static Tablero tablero;

    public HundirLaFlota() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        radioGroupNumJugadores = new javax.swing.ButtonGroup();
        panelJuego = new javax.swing.JPanel();
        panelInicial = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        botonJugar = new javax.swing.JButton();
        botonRanking = new javax.swing.JButton();
        panelRanking = new javax.swing.JPanel();
        panelRankingLista = new javax.swing.JPanel();
        rankingLabelJugador = new javax.swing.JLabel();
        rankingLabelVictorias = new javax.swing.JLabel();
        rankingLabelDerrotas = new javax.swing.JLabel();
        rankingBotonVolver = new javax.swing.JButton();
        panelElegirJugador = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        inputJug1 = new javax.swing.JTextField();
        panelNombreJug2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        inputJug2 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        botonComenzarPartida = new javax.swing.JButton();
        botonVolverEleccion = new javax.swing.JButton();
        panelTableroJuego = new javax.swing.JPanel();
        panelTableroTitulo = new javax.swing.JPanel();
        ponerBarcosTitulo = new javax.swing.JLabel();
        barcoAColocar = new javax.swing.JLabel();
        panelTablero = new javax.swing.JPanel();
        panelTableroBotonesColocacion = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        inputPosicionX = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        inputPosicionY = new javax.swing.JTextField();
        botonHorizontal = new javax.swing.JToggleButton();
        botonColocar = new javax.swing.JButton();
        panelTableroBotonesDisparo = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        inputPosicionXDisparo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        inputPosicionYDisparo = new javax.swing.JTextField();
        botonDisparar = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        campoError = new javax.swing.JLabel();
        panelFinJuego = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        textoVencedor = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        botonVolverFin = new javax.swing.JButton();
        panelFondo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 500));
        setSize(new java.awt.Dimension(800, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelJuego.setOpaque(false);
        panelJuego.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelInicial.setOpaque(false);
        panelInicial.setLayout(new javax.swing.BoxLayout(panelInicial, javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("¿Preparado para la batalla?");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel3.add(jLabel3);

        panelInicial.add(jPanel3);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        botonJugar.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        botonJugar.setText("¡JUGAR!");
        botonJugar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonJugarMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(botonJugar, gridBagConstraints);

        botonRanking.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        botonRanking.setText("VER RANKING");
        botonRanking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRankingMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(botonRanking, gridBagConstraints);

        panelInicial.add(jPanel1);

        panelJuego.add(panelInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 740, 100));

        panelRanking.setLayout(new javax.swing.BoxLayout(panelRanking, javax.swing.BoxLayout.Y_AXIS));

        panelRankingLista.setAutoscrolls(true);
        panelRankingLista.setLayout(new java.awt.GridLayout(1, 0));

        rankingLabelJugador.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        rankingLabelJugador.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rankingLabelJugador.setText("Jugador");
        rankingLabelJugador.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelRankingLista.add(rankingLabelJugador);

        rankingLabelVictorias.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        rankingLabelVictorias.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rankingLabelVictorias.setText("Victorias");
        rankingLabelVictorias.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelRankingLista.add(rankingLabelVictorias);

        rankingLabelDerrotas.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        rankingLabelDerrotas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rankingLabelDerrotas.setText("Derrotas");
        rankingLabelDerrotas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelRankingLista.add(rankingLabelDerrotas);

        panelRanking.add(panelRankingLista);

        rankingBotonVolver.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        rankingBotonVolver.setText("Volver");
        rankingBotonVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rankingBotonVolverMouseClicked(evt);
            }
        });
        panelRanking.add(rankingBotonVolver);

        panelJuego.add(panelRanking, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 400));

        panelElegirJugador.setLayout(new java.awt.GridLayout(5, 1));

        jLabel4.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("¿Cuántos jugadores?");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(jLabel4);

        panelElegirJugador.add(jPanel2);

        jLabel5.setFont(new java.awt.Font("Stencil", 0, 11)); // NOI18N
        jLabel5.setLabelFor(inputJug1);
        jLabel5.setText("Nombre jugador 1");
        jPanel5.add(jLabel5);

        inputJug1.setPreferredSize(new java.awt.Dimension(120, 30));
        jPanel5.add(inputJug1);

        panelElegirJugador.add(jPanel5);

        jLabel6.setFont(new java.awt.Font("Stencil", 0, 11)); // NOI18N
        jLabel6.setLabelFor(inputJug2);
        jLabel6.setText("Nombre jugador 2");
        panelNombreJug2.add(jLabel6);

        inputJug2.setPreferredSize(new java.awt.Dimension(120, 30));
        panelNombreJug2.add(inputJug2);

        panelElegirJugador.add(panelNombreJug2);

        botonComenzarPartida.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        botonComenzarPartida.setText("Comenzar");
        botonComenzarPartida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonComenzarPartidaMouseClicked(evt);
            }
        });
        jPanel7.add(botonComenzarPartida);

        botonVolverEleccion.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        botonVolverEleccion.setText("Volver");
        botonVolverEleccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonVolverEleccionMouseClicked(evt);
            }
        });
        jPanel7.add(botonVolverEleccion);

        panelElegirJugador.add(jPanel7);

        panelJuego.add(panelElegirJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 400));

        panelTableroJuego.setLayout(new javax.swing.BoxLayout(panelTableroJuego, javax.swing.BoxLayout.Y_AXIS));

        panelTableroTitulo.setLayout(new java.awt.GridLayout(2, 1));

        ponerBarcosTitulo.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        ponerBarcosTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ponerBarcosTitulo.setText("Es el turno de colocación de: XXX");
        ponerBarcosTitulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelTableroTitulo.add(ponerBarcosTitulo);

        barcoAColocar.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        barcoAColocar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        barcoAColocar.setText("Barco a colocar: Fragata (Longitud: 3)");
        barcoAColocar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelTableroTitulo.add(barcoAColocar);

        panelTableroJuego.add(panelTableroTitulo);

        panelTablero.setMaximumSize(new java.awt.Dimension(300, 300));
        panelTablero.setMinimumSize(new java.awt.Dimension(300, 300));
        panelTablero.setPreferredSize(new java.awt.Dimension(300, 300));
        panelTablero.setLayout(new java.awt.GridLayout(10, 10));
        panelTableroJuego.add(panelTablero);

        jLabel7.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        jLabel7.setLabelFor(inputPosicionX);
        jLabel7.setText("Posición X:");
        panelTableroBotonesColocacion.add(jLabel7);

        inputPosicionX.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        inputPosicionX.setPreferredSize(new java.awt.Dimension(30, 30));
        panelTableroBotonesColocacion.add(inputPosicionX);

        jLabel8.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        jLabel8.setLabelFor(inputPosicionY);
        jLabel8.setText("Posición Y:");
        panelTableroBotonesColocacion.add(jLabel8);

        inputPosicionY.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        inputPosicionY.setPreferredSize(new java.awt.Dimension(30, 30));
        panelTableroBotonesColocacion.add(inputPosicionY);

        botonHorizontal.setSelected(true);
        botonHorizontal.setText("Horizontal");
        botonHorizontal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                botonHorizontalItemStateChanged(evt);
            }
        });
        panelTableroBotonesColocacion.add(botonHorizontal);

        botonColocar.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        botonColocar.setText("¡Colocar!");
        botonColocar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonColocarMouseClicked(evt);
            }
        });
        panelTableroBotonesColocacion.add(botonColocar);

        panelTableroJuego.add(panelTableroBotonesColocacion);

        jLabel9.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        jLabel9.setLabelFor(inputPosicionX);
        jLabel9.setText("Posición X:");
        panelTableroBotonesDisparo.add(jLabel9);

        inputPosicionXDisparo.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        inputPosicionXDisparo.setPreferredSize(new java.awt.Dimension(30, 30));
        panelTableroBotonesDisparo.add(inputPosicionXDisparo);

        jLabel10.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        jLabel10.setLabelFor(inputPosicionY);
        jLabel10.setText("Posición Y:");
        panelTableroBotonesDisparo.add(jLabel10);

        inputPosicionYDisparo.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        inputPosicionYDisparo.setPreferredSize(new java.awt.Dimension(30, 30));
        panelTableroBotonesDisparo.add(inputPosicionYDisparo);

        botonDisparar.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        botonDisparar.setText("¡Disparar!");
        botonDisparar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonDispararMouseClicked(evt);
            }
        });
        panelTableroBotonesDisparo.add(botonDisparar);

        panelTableroJuego.add(panelTableroBotonesDisparo);

        campoError.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        campoError.setForeground(new java.awt.Color(255, 0, 51));
        jPanel9.add(campoError);

        panelTableroJuego.add(jPanel9);

        panelJuego.add(panelTableroJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 400));

        panelFinJuego.setLayout(new java.awt.GridLayout(5, 1));

        textoVencedor.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        textoVencedor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoVencedor.setText("¿Cuántos jugadores?");
        textoVencedor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(textoVencedor);

        panelFinJuego.add(jPanel4);

        botonVolverFin.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        botonVolverFin.setText("Volver");
        botonVolverFin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonVolverFinMouseClicked(evt);
            }
        });
        jPanel8.add(botonVolverFin);

        panelFinJuego.add(jPanel8);

        panelJuego.add(panelFinJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 400));

        getContentPane().add(panelJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 740, 400));

        panelFondo.setLayout(new java.awt.GridBagLayout());

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Stencil", 0, 48)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("HUNDIR LA FLOTA");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        panelFondo.add(jLabel2, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/background.png"))); // NOI18N
        jLabel1.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelFondo.add(jLabel1, gridBagConstraints);

        getContentPane().add(panelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que implementa la funcionalidad necesaria para pintar el ranking
     * en la interfaz
     *
     * @param evt Evento del ratón
     */
    private void botonRankingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRankingMouseClicked

        ArrayList<Puntuacion> listaPuntuaciones = ranking.getListaPuntuacion();
        Iterator<Puntuacion> iterator = listaPuntuaciones.iterator();
        panelRankingLista.removeAll();
        panelRankingLista.add(rankingLabelJugador);
        panelRankingLista.add(rankingLabelVictorias);
        panelRankingLista.add(rankingLabelDerrotas);
        while (iterator.hasNext()) {
            Puntuacion next = iterator.next();
            JLabel nombreJugador = new JLabel(next.getJugador().getNombre());
            JLabel victorias = new JLabel(next.getVictorias() + "");
            JLabel derrotas = new JLabel(next.getDerrotas() + "");

            nombreJugador.setHorizontalAlignment(SwingConstants.CENTER);
            victorias.setHorizontalAlignment(SwingConstants.CENTER);
            derrotas.setHorizontalAlignment(SwingConstants.CENTER);
            panelRankingLista.add(nombreJugador);
            panelRankingLista.add(victorias);
            panelRankingLista.add(derrotas);
        }
        GridLayout layout = new GridLayout(listaPuntuaciones.size() + 1, 3);
        panelRankingLista.setLayout(layout);
        pintaRanking();
    }//GEN-LAST:event_botonRankingMouseClicked

    /**
     * Método que implementa la funcionalidad necesaria para ocultar el ranking
     * y volver a la pantalla anterior
     *
     * @param evt Evento del ratón
     *
     */
    private void rankingBotonVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rankingBotonVolverMouseClicked
        ocultarRanking();
    }//GEN-LAST:event_rankingBotonVolverMouseClicked

    /**
     * Método que inicializa un nuevo tablero y prepara la fase de elección de
     * jugadores
     *
     * @param evt Evento del ratón
     *
     */
    private void botonJugarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonJugarMouseClicked
        tablero = new Tablero();
        inicializaMar();
        pintarFaseElegirJugador();
    }//GEN-LAST:event_botonJugarMouseClicked

    /**
     * Método para salir de la pantalla de elegir jugadores y volver al menu
     * inicial
     *
     * @param evt Evento del ratón
     */
    private void botonVolverEleccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonVolverEleccionMouseClicked
        ocultarFaseElegirJugador();
    }//GEN-LAST:event_botonVolverEleccionMouseClicked

    /**
     * Método que crea a los jugadores indicados en pantalla y prepara la fase
     * de colocacion de barcos
     *
     * @param evt Evento del ratón
     */
    private void botonComenzarPartidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonComenzarPartidaMouseClicked

        tablero.crearJugadores(inputJug1.getText(), inputJug2.getText());

        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateFieldState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateFieldState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateFieldState();
            }

            protected void updateFieldState() {
                previsualizaColocacion();
            }
        };

        inputPosicionX.getDocument().addDocumentListener(documentListener);
        inputPosicionY.getDocument().addDocumentListener(documentListener);
        pintarFaseColocacion();
    }//GEN-LAST:event_botonComenzarPartidaMouseClicked

    /**
     * Método que realiza la colocación de un barco en caso de ser posible,
     * mostrando error en caso contrario. Si se coloca correctamenten prepara la
     * colocación del siguiente barco
     *
     * @param evt Evento del ratón
     */
    private void botonColocarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonColocarMouseClicked
        int posX = -1;
        int posY = -1;
        campoError.setText("");
        try {
            posX = Integer.parseInt(inputPosicionX.getText());
            posY = Integer.parseInt(inputPosicionY.getText());
            Barco barcoActual = tablero.colocarSiguienteBarco();
            boolean horizontal = botonHorizontal.isSelected();
            if (tablero.coordenadaPerteneceATablero(posX, posY)) {
                boolean colocado = tablero.colocarBarcoEnTablero(barcoActual, posX, posY, horizontal);
                if (colocado) {
                    if (!tablero.finFaseColocacion()) {
                        if (tablero.finFaseColocacionJugador()) {
                            pintarMar();
                            estableceTituloTurnoColocacion();
                        } else {
                            pintaColocados();
                            estableceNombreBarcoAColocar();
                        }
                    } else {
                        prepararCombate();
                    }
                } else {
                    campoError.setText("Colocación no posible en esta posición");
                }
            } else {
                campoError.setText("Las coordenadas deben pertenecer al tablero");
            }
        } catch (NumberFormatException e) {
            campoError.setText("Coordenadas no válidas, deben ser números");
        }
    }//GEN-LAST:event_botonColocarMouseClicked

    /**
     * Método lanzado cada vez que cambie el estado del boton para marcar si la
     * colocación se desea en horizontal o vertical, dispara la previsualización
     * de dicho barco en el tablero
     *
     * @param evt Evento del ratón
     */
    private void botonHorizontalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_botonHorizontalItemStateChanged
        previsualizaColocacion();
    }//GEN-LAST:event_botonHorizontalItemStateChanged

    /**
     * Método que realiza la lógica necesaria para realizar un disparo, si no es
     * posible lo indica en pantalla, si se realiza correctamente verifica si ha
     * finalizado o no el juego, para preparar un nuevo turno o no
     *
     * @param evt Evento del ratón
     */
    private void botonDispararMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonDispararMouseClicked
        int posX = -1;
        int posY = -1;
        campoError.setText("");
        try {
            posX = Integer.parseInt(inputPosicionXDisparo.getText());
            posY = Integer.parseInt(inputPosicionYDisparo.getText());

            if (tablero.coordenadaPerteneceATablero(posX, posY)) {
                if (tablero.disparoPosible(posX, posY)) {

                    tablero.disparar(posX, posY);

                    if (tablero.esFinJuego()) {
                        guardarVencedor();
                        pintarFinJuego();
                    } else {
                        prepararTurnoDisparo();
                    }
                } else {
                    campoError.setText("Disparo no posible en esas coordenadas");
                }
            } else {
                campoError.setText("Las coordenadas deben pertenecer al tablero");
            }
        } catch (NumberFormatException e) {
            campoError.setText("Coordenadas no válidas, deben ser números");
        }

    }//GEN-LAST:event_botonDispararMouseClicked

    /**
     * Método que cierra la pantalla de fin de juego y vuelve a la de inicio
     *
     * @param evt Evento del ratón
     */
    private void botonVolverFinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonVolverFinMouseClicked
        ocultarFinJuego();
    }//GEN-LAST:event_botonVolverFinMouseClicked

    /**
     * Método para pintar en pantalla de quién es el turno de colocación actual
     */
    private void estableceTituloTurnoColocacion() {
        String prefijo = "Es el turno de colocación de: ";
        ponerBarcosTitulo.setText(prefijo + tablero.obtieneJugadorTurnoActual().getNombre());
    }

    /**
     * Método para pintar en pantalla de quién es el turno de disparo actual
     */
    private void estableceTituloTurnoJuego() {
        String prefijo = "Es el turno de disparo de: ";
        ponerBarcosTitulo.setText(prefijo + tablero.obtieneJugadorTurnoActual().getNombre());
    }

    /**
     * Método para pintar en pantalla cual es el siguiente barco que se debe
     * colocar
     */
    private void estableceNombreBarcoAColocar() {
        barcoAColocar.setText("Barco a colocar: " + tablero.colocarSiguienteBarco().toString());
    }

    /**
     * Método que inicializa por primera vez la pantalla con todas las casillas
     * del mar
     */
    private void inicializaMar() {
        if (panelTablero.getComponents().length == 0) {
            for (int i = 0; i < tablero.getTamanyo(); i++) {
                for (int j = 0; j < tablero.getTamanyo(); j++) {
                    JLabel casilla = new JLabel(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/ola.png")));
                    casilla.setSize(30, 30);
                    panelTablero.add(casilla);
                }
            }
        }
        pintarMar();
    }

    /**
     * Método que pinta como olas todas las casillas de la pantalla
     */
    private void pintarMar() {
        for (int i = 0; i < tablero.getTamanyo(); i++) {
            for (int j = 0; j < tablero.getTamanyo(); j++) {
                Component component = panelTablero.getComponent(i + j * 10);
                ((JLabel) component).setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/ola.png")));
            }
        }
    }

    /**
     * Método que busca los barcos colocados del jugador actual y los visualiza
     * en pantalla para que pueda ver dónde tiene colocados los barcos
     * anteriormente colocados
     */
    private void pintaColocados() {

        ArrayList<Barco> barcosColocados = tablero.obtieneBarcosYaColocados();
        Iterator<Barco> it = barcosColocados.iterator();
        while (it.hasNext()) {
            Barco barco = it.next();
            SeccionBarco[] secciones = barco.getSecciones();
            for (int i = 0; i < secciones.length; i++) {
                SeccionBarco seccion = secciones[i];
                Component component = panelTablero.getComponent(seccion.getPosX() + seccion.getPosY() * 10);
                ((JLabel) component).setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/barco.png")));
            }
        }
    }

    /**
     * Método que realiza la previsualización en pantalla del barco que está
     * colocandose, para verificar que es donde se desea colocar
     */
    private void previsualizaColocacion() {
        pintarMar();
        pintaColocados();
        int posX = -1;
        int posY = -1;
        campoError.setText("");
        try {
            posX = Integer.parseInt(inputPosicionX.getText());
            posY = Integer.parseInt(inputPosicionY.getText());
            Barco barcoActual = tablero.colocarSiguienteBarco();
            boolean horizontal = botonHorizontal.isSelected();
            if (tablero.colocacionPosibleEnTablero(barcoActual, posX, posY, horizontal)) {
                barcoActual.crearSecciones(posX, posY, horizontal);
                SeccionBarco[] secciones = barcoActual.getSecciones();
                for (int i = 0; i < secciones.length; i++) {
                    SeccionBarco seccion = secciones[i];
                    Component component = panelTablero.getComponent(seccion.getPosX() + seccion.getPosY() * 10);
                    ((JLabel) component).setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/barcoVerde.png")));
                }

            } else {
                campoError.setText("Las coordenadas deben pertenecer al tablero");
            }
        } catch (NumberFormatException e) {
            campoError.setText("Coordenadas no válidas, deben ser números");
        }
    }

    /**
     * Pinta el estado de juego de cada jugador, para que vea si hay impactado
     * algun barco contrario, y dónde ha realizado ya disparos anteriormente
     */
    private void pintarMarJugador() {
        Casilla[][] oceano = tablero.getEstadoActual();

        for (int i = 0; i < tablero.getTamanyo(); i++) {
            for (int j = 0; j < tablero.getTamanyo(); j++) {
                Component component = panelTablero.getComponent(i + j * 10);

                if (oceano[i][j].isImpactado()) {
                    if (oceano[i][j].isHayBarco()) {
                        ((JLabel) component).setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/barcoDestruido.png")));
                    } else {
                        ((JLabel) component).setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/agua.png")));
                    }
                } else {
                    ((JLabel) component).setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/ola.png")));
                }
            }
        }

    }

    /**
     * Método para previsualizar en pantalla a dónde está apuntando el disparo,
     * para verificar que son las coordenadas deseadas
     */
    private void previsualizaDisparo() {
        pintarMarJugador();
        int posX = -1;
        int posY = -1;
        campoError.setText("");
        try {
            posX = Integer.parseInt(inputPosicionXDisparo.getText());
            posY = Integer.parseInt(inputPosicionYDisparo.getText());

            if (tablero.coordenadaPerteneceATablero(posX, posY)) {
                if (tablero.disparoPosible(posX, posY)) {
                    Component component = panelTablero.getComponent(posX + posY * 10);
                    ((JLabel) component).setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirlaflota/diana.png")));
                } else {
                    campoError.setText("Disparo no posible en esas coordenadas");
                }
            } else {
                campoError.setText("Las coordenadas deben pertenecer al tablero");
            }
        } catch (NumberFormatException e) {
            campoError.setText("Coordenadas no válidas, deben ser números");
        }
    }

    /**
     * Método que prepara la fase de combate, preparando el mar visualmente para
     * que el jugador pueda elegir dónde disparar
     */
    private void prepararCombate() {
        pintaFaseCombate();
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateFieldState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateFieldState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateFieldState();
            }

            protected void updateFieldState() {
                previsualizaDisparo();
            }
        };

        inputPosicionXDisparo.getDocument().addDocumentListener(documentListener);
        inputPosicionYDisparo.getDocument().addDocumentListener(documentListener);
        pintarMar();
    }

    /**
     * Prepara visualmente un turno de disparo
     */
    private void prepararTurnoDisparo() {
        pintarMarJugador();
        estableceTituloTurnoJuego();
        previsualizaDisparo();
    }

    /**
     * Guarda en el ranking la información de la partida que ha finalizado
     */
    private void guardarVencedor() {
        Jugador vencedor = tablero.obtieneVencedor();
        Jugador perdedor = tablero.obtienePerdedor();
        ranking.anyadirPuntuacion(vencedor, perdedor);
    }

    /**
     * Oculta el resto de paneles para sólo dejar visible el panel inicial
     */
    private static void pintarFaseInicial() {
        panelRanking.setVisible(false);
        panelElegirJugador.setVisible(false);
        panelTableroJuego.setVisible(false);
        panelFinJuego.setVisible(false);
    }

    /**
     * Oculta el resto de paneles para sólo dejar visible el panel del ranking
     */
    private void pintaRanking() {
        panelInicial.setVisible(false);
        panelRanking.setVisible(true);
    }

    /**
     * Oculta el panel del ranking y vuelve a dejar visible el panel inicial
     */
    private void ocultarRanking() {
        panelRanking.setVisible(false);
        panelInicial.setVisible(true);
    }

    /**
     * Oculta el panel del inicial y hace visible el panel de eleccion de
     * jugadores
     */
    private void pintarFaseElegirJugador() {
        panelElegirJugador.setVisible(true);
        panelInicial.setVisible(false);
    }

    /**
     * Oculta el panel de elección de jugadores y vuelve a dejar visible el
     * panel inicial
     */
    private void ocultarFaseElegirJugador() {
        panelElegirJugador.setVisible(false);
        panelInicial.setVisible(true);
    }

    /**
     * Pinta visualmente la fase de colocación, ocultando el panel de eleccion
     * de jugador y pintando los paneles necesarios para colocar barcos
     */
    private void pintarFaseColocacion() {
        estableceTituloTurnoColocacion();
        estableceNombreBarcoAColocar();
        panelTableroBotonesColocacion.setVisible(true);
        panelElegirJugador.setVisible(false);
        barcoAColocar.setVisible(true);
        panelTableroJuego.setVisible((true));
        panelTableroBotonesDisparo.setVisible(false);
    }

    /**
     * Pinta la fase de combate, mostrando el panel de disparar y ocultando el
     * de colocar barcos
     */
    private void pintaFaseCombate() {
        estableceTituloTurnoJuego();
        panelTableroBotonesColocacion.setVisible(false);
        panelTableroBotonesDisparo.setVisible(true);
        barcoAColocar.setVisible(false);
    }

    /**
     * Pinta la pantalla de finde juego
     */
    private void pintarFinJuego() {
        panelTableroJuego.setVisible(false);
        panelFinJuego.setVisible(true);
        textoVencedor.setText("¡EL VENCEDOR ES " + tablero.obtieneVencedor().getNombre() + "!");
    }

    /**
     * Oculta la pantalla de finde juego y vuelve a la inicial
     */
    private void ocultarFinJuego() {
        panelFinJuego.setVisible(false);
        panelInicial.setVisible(true);
    }

    /**
     * Método Main que realiza el pintado de la aplicación e inicializa el
     * ranking
     *
     * @param args args
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HundirLaFlota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HundirLaFlota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HundirLaFlota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HundirLaFlota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HundirLaFlota().setVisible(true);
                pintarFaseInicial();
                ranking = new Ranking();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel barcoAColocar;
    private javax.swing.JButton botonColocar;
    private javax.swing.JButton botonComenzarPartida;
    private javax.swing.JButton botonDisparar;
    private javax.swing.JToggleButton botonHorizontal;
    private javax.swing.JButton botonJugar;
    private javax.swing.JButton botonRanking;
    private javax.swing.JButton botonVolverEleccion;
    private javax.swing.JButton botonVolverFin;
    private javax.swing.JLabel campoError;
    private javax.swing.JTextField inputJug1;
    private javax.swing.JTextField inputJug2;
    private javax.swing.JTextField inputPosicionX;
    private javax.swing.JTextField inputPosicionXDisparo;
    private javax.swing.JTextField inputPosicionY;
    private javax.swing.JTextField inputPosicionYDisparo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    static javax.swing.JPanel panelElegirJugador;
    static javax.swing.JPanel panelFinJuego;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JPanel panelInicial;
    private javax.swing.JPanel panelJuego;
    private javax.swing.JPanel panelNombreJug2;
    private static javax.swing.JPanel panelRanking;
    private javax.swing.JPanel panelRankingLista;
    static javax.swing.JPanel panelTablero;
    private javax.swing.JPanel panelTableroBotonesColocacion;
    private javax.swing.JPanel panelTableroBotonesDisparo;
    static javax.swing.JPanel panelTableroJuego;
    private javax.swing.JPanel panelTableroTitulo;
    private javax.swing.JLabel ponerBarcosTitulo;
    private javax.swing.ButtonGroup radioGroupNumJugadores;
    private javax.swing.JButton rankingBotonVolver;
    private javax.swing.JLabel rankingLabelDerrotas;
    private javax.swing.JLabel rankingLabelJugador;
    private javax.swing.JLabel rankingLabelVictorias;
    private javax.swing.JLabel textoVencedor;
    // End of variables declaration//GEN-END:variables
}
